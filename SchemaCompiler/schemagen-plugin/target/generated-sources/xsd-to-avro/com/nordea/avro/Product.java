/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nordea.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** XSD Type:{urn:nonstandard:XSD_Schema}Product */
@org.apache.avro.specific.AvroGenerated
public class Product extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8349958064820859609L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Product\",\"namespace\":\"com.nordea.avro\",\"doc\":\"XSD Type:{urn:nonstandard:XSD_Schema}Product\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}long\",\"default\":\"0\"},{\"name\":\"quantity\",\"type\":[\"null\",\"string\"],\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}integer\",\"default\":\"null\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** XSD Type:{http://www.w3.org/2001/XMLSchema}long */
  @Deprecated public long id;
  /** XSD Type:{http://www.w3.org/2001/XMLSchema}integer */
  @Deprecated public java.lang.CharSequence quantity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Product() {}

  /**
   * All-args constructor.
   * @param id XSD Type:{http://www.w3.org/2001/XMLSchema}long
   * @param quantity XSD Type:{http://www.w3.org/2001/XMLSchema}integer
   */
  public Product(java.lang.Long id, java.lang.CharSequence quantity) {
    this.id = id;
    this.quantity = quantity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return quantity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: quantity = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return XSD Type:{http://www.w3.org/2001/XMLSchema}long
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * XSD Type:{http://www.w3.org/2001/XMLSchema}long
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return XSD Type:{http://www.w3.org/2001/XMLSchema}integer
   */
  public java.lang.CharSequence getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * XSD Type:{http://www.w3.org/2001/XMLSchema}integer
   * @param value the value to set.
   */
  public void setQuantity(java.lang.CharSequence value) {
    this.quantity = value;
  }

  /**
   * Creates a new Product RecordBuilder.
   * @return A new Product RecordBuilder
   */
  public static com.nordea.avro.Product.Builder newBuilder() {
    return new com.nordea.avro.Product.Builder();
  }

  /**
   * Creates a new Product RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Product RecordBuilder
   */
  public static com.nordea.avro.Product.Builder newBuilder(com.nordea.avro.Product.Builder other) {
    return new com.nordea.avro.Product.Builder(other);
  }

  /**
   * Creates a new Product RecordBuilder by copying an existing Product instance.
   * @param other The existing instance to copy.
   * @return A new Product RecordBuilder
   */
  public static com.nordea.avro.Product.Builder newBuilder(com.nordea.avro.Product other) {
    return new com.nordea.avro.Product.Builder(other);
  }

  /**
   * RecordBuilder for Product instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Product>
    implements org.apache.avro.data.RecordBuilder<Product> {

    /** XSD Type:{http://www.w3.org/2001/XMLSchema}long */
    private long id;
    /** XSD Type:{http://www.w3.org/2001/XMLSchema}integer */
    private java.lang.CharSequence quantity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nordea.avro.Product.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Product instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nordea.avro.Product other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * XSD Type:{http://www.w3.org/2001/XMLSchema}long
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * XSD Type:{http://www.w3.org/2001/XMLSchema}long
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.nordea.avro.Product.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * XSD Type:{http://www.w3.org/2001/XMLSchema}long
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * XSD Type:{http://www.w3.org/2001/XMLSchema}long
      * @return This builder.
      */
    public com.nordea.avro.Product.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * XSD Type:{http://www.w3.org/2001/XMLSchema}integer
      * @return The value.
      */
    public java.lang.CharSequence getQuantity() {
      return quantity;
    }

    /**
      * Sets the value of the 'quantity' field.
      * XSD Type:{http://www.w3.org/2001/XMLSchema}integer
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.nordea.avro.Product.Builder setQuantity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.quantity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * XSD Type:{http://www.w3.org/2001/XMLSchema}integer
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantity' field.
      * XSD Type:{http://www.w3.org/2001/XMLSchema}integer
      * @return This builder.
      */
    public com.nordea.avro.Product.Builder clearQuantity() {
      quantity = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Product build() {
      try {
        Product record = new Product();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.quantity = fieldSetFlags()[1] ? this.quantity : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
