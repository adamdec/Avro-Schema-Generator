/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nordea.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** XSD Type:{urn:nonstandard:XSD_Schema}Order */
@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5576233043156159112L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.nordea.avro\",\"doc\":\"XSD Type:{urn:nonstandard:XSD_Schema}Order\",\"fields\":[{\"name\":\"user\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"User\",\"doc\":\"XSD Type:{urn:nonstandard:XSD_Schema}User\",\"fields\":[{\"name\":\"fullName\",\"type\":[\"null\",\"string\"],\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}string\",\"default\":\"null\"},{\"name\":\"age\",\"type\":\"int\",\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}int\",\"default\":\"0\"},{\"name\":\"born\",\"type\":{\"type\":\"record\",\"name\":\"_Date\",\"doc\":\"A date stored as a timestamp, in [ms] UTC.\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"default\":\"0\"}]},\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}dateTime\"},{\"name\":\"died\",\"type\":\"_Date\",\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}date, Date format 'yyyy-MM-dd'\"},{\"name\":\"tweets\",\"type\":\"long\",\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}long\",\"default\":\"0\"},{\"name\":\"married\",\"type\":\"boolean\",\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}boolean\",\"default\":\"true\"},{\"name\":\"height\",\"type\":\"double\",\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}decimal\",\"default\":0.0},{\"name\":\"width\",\"type\":\"double\",\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}double\",\"default\":0.0}]}],\"doc\":\"XSD Type:{urn:nonstandard:XSD_Schema}user\",\"default\":\"null\"},{\"name\":\"products\",\"type\":{\"type\":\"record\",\"name\":\"Products\",\"doc\":\"XSD Type:{urn:nonstandard:XSD_Schema}Products\",\"fields\":[{\"name\":\"product\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Product\",\"doc\":\"XSD Type:{urn:nonstandard:XSD_Schema}Product\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}long\",\"default\":\"0\"},{\"name\":\"quantity\",\"type\":[\"null\",\"string\"],\"doc\":\"XSD Type:{http://www.w3.org/2001/XMLSchema}integer\",\"default\":\"null\"}]}},\"default\":\"[]\"}]},\"doc\":\"XSD Type:{urn:nonstandard:XSD_Schema}products\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** XSD Type:{urn:nonstandard:XSD_Schema}user */
  @Deprecated public com.nordea.avro.User user;
  /** XSD Type:{urn:nonstandard:XSD_Schema}products */
  @Deprecated public com.nordea.avro.Products products;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param user XSD Type:{urn:nonstandard:XSD_Schema}user
   * @param products XSD Type:{urn:nonstandard:XSD_Schema}products
   */
  public Order(com.nordea.avro.User user, com.nordea.avro.Products products) {
    this.user = user;
    this.products = products;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user;
    case 1: return products;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user = (com.nordea.avro.User)value$; break;
    case 1: products = (com.nordea.avro.Products)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user' field.
   * @return XSD Type:{urn:nonstandard:XSD_Schema}user
   */
  public com.nordea.avro.User getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * XSD Type:{urn:nonstandard:XSD_Schema}user
   * @param value the value to set.
   */
  public void setUser(com.nordea.avro.User value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'products' field.
   * @return XSD Type:{urn:nonstandard:XSD_Schema}products
   */
  public com.nordea.avro.Products getProducts() {
    return products;
  }

  /**
   * Sets the value of the 'products' field.
   * XSD Type:{urn:nonstandard:XSD_Schema}products
   * @param value the value to set.
   */
  public void setProducts(com.nordea.avro.Products value) {
    this.products = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static com.nordea.avro.Order.Builder newBuilder() {
    return new com.nordea.avro.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static com.nordea.avro.Order.Builder newBuilder(com.nordea.avro.Order.Builder other) {
    return new com.nordea.avro.Order.Builder(other);
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static com.nordea.avro.Order.Builder newBuilder(com.nordea.avro.Order other) {
    return new com.nordea.avro.Order.Builder(other);
  }

  /**
   * RecordBuilder for Order instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    /** XSD Type:{urn:nonstandard:XSD_Schema}user */
    private com.nordea.avro.User user;
    private com.nordea.avro.User.Builder userBuilder;
    /** XSD Type:{urn:nonstandard:XSD_Schema}products */
    private com.nordea.avro.Products products;
    private com.nordea.avro.Products.Builder productsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nordea.avro.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      if (other.hasUserBuilder()) {
        this.userBuilder = com.nordea.avro.User.newBuilder(other.getUserBuilder());
      }
      if (isValidValue(fields()[1], other.products)) {
        this.products = data().deepCopy(fields()[1].schema(), other.products);
        fieldSetFlags()[1] = true;
      }
      if (other.hasProductsBuilder()) {
        this.productsBuilder = com.nordea.avro.Products.newBuilder(other.getProductsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nordea.avro.Order other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      this.userBuilder = null;
      if (isValidValue(fields()[1], other.products)) {
        this.products = data().deepCopy(fields()[1].schema(), other.products);
        fieldSetFlags()[1] = true;
      }
      this.productsBuilder = null;
    }

    /**
      * Gets the value of the 'user' field.
      * XSD Type:{urn:nonstandard:XSD_Schema}user
      * @return The value.
      */
    public com.nordea.avro.User getUser() {
      return user;
    }

    /**
      * Sets the value of the 'user' field.
      * XSD Type:{urn:nonstandard:XSD_Schema}user
      * @param value The value of 'user'.
      * @return This builder.
      */
    public com.nordea.avro.Order.Builder setUser(com.nordea.avro.User value) {
      validate(fields()[0], value);
      this.userBuilder = null;
      this.user = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * XSD Type:{urn:nonstandard:XSD_Schema}user
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'user' field and creates one if it doesn't exist yet.
     * XSD Type:{urn:nonstandard:XSD_Schema}user
     * @return This builder.
     */
    public com.nordea.avro.User.Builder getUserBuilder() {
      if (userBuilder == null) {
        if (hasUser()) {
          setUserBuilder(com.nordea.avro.User.newBuilder(user));
        } else {
          setUserBuilder(com.nordea.avro.User.newBuilder());
        }
      }
      return userBuilder;
    }

    /**
     * Sets the Builder instance for the 'user' field
     * XSD Type:{urn:nonstandard:XSD_Schema}user
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.nordea.avro.Order.Builder setUserBuilder(com.nordea.avro.User.Builder value) {
      clearUser();
      userBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'user' field has an active Builder instance
     * XSD Type:{urn:nonstandard:XSD_Schema}user
     * @return True if the 'user' field has an active Builder instance
     */
    public boolean hasUserBuilder() {
      return userBuilder != null;
    }

    /**
      * Clears the value of the 'user' field.
      * XSD Type:{urn:nonstandard:XSD_Schema}user
      * @return This builder.
      */
    public com.nordea.avro.Order.Builder clearUser() {
      user = null;
      userBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'products' field.
      * XSD Type:{urn:nonstandard:XSD_Schema}products
      * @return The value.
      */
    public com.nordea.avro.Products getProducts() {
      return products;
    }

    /**
      * Sets the value of the 'products' field.
      * XSD Type:{urn:nonstandard:XSD_Schema}products
      * @param value The value of 'products'.
      * @return This builder.
      */
    public com.nordea.avro.Order.Builder setProducts(com.nordea.avro.Products value) {
      validate(fields()[1], value);
      this.productsBuilder = null;
      this.products = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'products' field has been set.
      * XSD Type:{urn:nonstandard:XSD_Schema}products
      * @return True if the 'products' field has been set, false otherwise.
      */
    public boolean hasProducts() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'products' field and creates one if it doesn't exist yet.
     * XSD Type:{urn:nonstandard:XSD_Schema}products
     * @return This builder.
     */
    public com.nordea.avro.Products.Builder getProductsBuilder() {
      if (productsBuilder == null) {
        if (hasProducts()) {
          setProductsBuilder(com.nordea.avro.Products.newBuilder(products));
        } else {
          setProductsBuilder(com.nordea.avro.Products.newBuilder());
        }
      }
      return productsBuilder;
    }

    /**
     * Sets the Builder instance for the 'products' field
     * XSD Type:{urn:nonstandard:XSD_Schema}products
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.nordea.avro.Order.Builder setProductsBuilder(com.nordea.avro.Products.Builder value) {
      clearProducts();
      productsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'products' field has an active Builder instance
     * XSD Type:{urn:nonstandard:XSD_Schema}products
     * @return True if the 'products' field has an active Builder instance
     */
    public boolean hasProductsBuilder() {
      return productsBuilder != null;
    }

    /**
      * Clears the value of the 'products' field.
      * XSD Type:{urn:nonstandard:XSD_Schema}products
      * @return This builder.
      */
    public com.nordea.avro.Order.Builder clearProducts() {
      products = null;
      productsBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Order build() {
      try {
        Order record = new Order();
        if (userBuilder != null) {
          record.user = this.userBuilder.build();
        } else {
          record.user = fieldSetFlags()[0] ? this.user : (com.nordea.avro.User) defaultValue(fields()[0]);
        }
        if (productsBuilder != null) {
          record.products = this.productsBuilder.build();
        } else {
          record.products = fieldSetFlags()[1] ? this.products : (com.nordea.avro.Products) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
